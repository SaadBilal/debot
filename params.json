{
  "name": "Debot",
  "tagline": "A simple Android library to create Debugging menu",
  "body": "# Debot\r\n![debot_logo.png](https://raw.githubusercontent.com/tomoima525/debot/master/art/debot_logo.png)  \r\nA simple Android library to create Debugging menu.\r\n\r\nDebot offers features that are useful to debug Android applications. Those features can be added to any activity that has the toolbar menu. Also, developers can easily add their own custom debugging features with simple steps.\r\n\r\n![debot_4.gif](https://raw.githubusercontent.com/tomoima525/debot/master/art/debot_4.gif)\r\n\r\n## How it looks\r\nOnce you setup Debot to your app, you will see couple of debugging features are added to your toolbar menu.\r\n\r\n* Default debugging menu  \r\n![debot-sample1.png](https://raw.githubusercontent.com/tomoima525/debot/master/art/debot-sample1.png)\r\n* Check Density  \r\n![debot-sample4.png](https://raw.githubusercontent.com/tomoima525/debot/master/art/debot-sample4.png)\r\n* Check App ver  \r\n![debot-sample2.png](https://raw.githubusercontent.com/tomoima525/debot/master/art/debot-sample2.png)\r\n* Show intent and Activity Info  \r\n![debot-sample3.png](https://raw.githubusercontent.com/tomoima525/debot/master/art/debot-sample3.png)\r\n* Dev input (Automatically adds text to EditText field )  \r\n![debot-sample5.png](https://raw.githubusercontent.com/tomoima525/debot/master/art/debot-sample5.png)\r\n\r\n\r\n## Setup\r\n### Download\r\nGrab Debot from Gradle:\r\n\r\n```groovy\r\ndebugCompile 'com.tomoima.debot:debot:1.1.0'\r\nreleaseCompile 'com.tomoima.debot:debot-no-op:1.1.0'\r\n```\r\n\r\n### Initialization\r\n1. Call `DebotConfigurator.configureWithDefault()` at the Application's `onCreate()` class.\r\n\r\n```java\r\npublic class MyApplication extends Application {\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        DebotConfigurator.configureWithDefault(this);\r\n    }\r\n}\r\n```\r\n\r\n2. Set below to any Activity you want to show the debugging menu.\r\n\r\n```java\r\npublic class MainActivity extends AppCompatActivity{\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        Debot.getInstance(this);\r\n    }\r\n}    \r\n```\r\n\r\nCalling from BaseActivity's onCreate method is suggested if you always want to use them.\r\nThat's it! Start your app and there will be the debugging menu added on the toolbar. \r\n\r\n## Change Debot visibility\r\n\r\nIn some cases, You don't want to show debugging menu. You can control the visibility of Debugging menu by just calling `Debot.setVisibility()` at `onPrepareOptionsMenu`  \r\n\r\n```java\r\n@Override\r\npublic boolean onPrepareOptionsMenu(Menu menu) {\r\n    Debot.setVisibility(menu, menuVisibility);\r\n    return super.onPrepareOptionsMenu(menu);\r\n}\r\n```\r\n\r\n\r\nSee the [`debot-sample` project](debot-sample) for more details.\r\n\r\n## Custom debugging plugins\r\nYou can create your own debugging feature by developing a class which inherits `DebotStrategy`.\r\n\r\n\r\n```java\r\npublic class MyDebotStrategy extends DebotStrategy{\r\n    @Override\r\n    public void startAction(@NonNull Activity activity) {\r\n    // Do your things\r\n    }\r\n}\r\n```\r\n\r\nThen, at the Application class, call `Debot.configureWithCustomizeMenu()`\r\n\r\n\r\n```java\r\npublic class MyApplication extends Application {\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        DebotStrategyBuilder builder = new DebotStrategyBuilder.Builder(context)\r\n                .registerMenu(\"My debug feature\", new MyDebotStrategy())\r\n                .build();\r\n        DebotConfigurator.configureWithCustomizeMenu(this, builder.getStrategyList());\r\n    }\r\n}\r\n```\r\n\r\n## Call a specific method from your Activity\r\nIf you want to call a specific method from your Activity, annotate the method with `@DebotAnnotation`\r\n\r\n```java\r\n//Your Activity\r\n@DebotAnnotation(\"debugInput\")  // A parameter for @DebotAnnotation should be same as the method's name\r\npublic void debugInput() {\r\n    // Do things\r\n}\r\n\r\n```\r\n\r\nAlso, setup a custom debugging plugin with `DebotCallActivityMethodStrategy`\r\n\r\n```java\r\npublic class MyApplication extends Application {\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        DebotStrategyBuilder builder = new DebotStrategyBuilder.Builder(context)\r\n                .registerMenu(\"input\", new DebotCallActivityMethodStrategy(\"debugInput\"))\r\n                .build();\r\n        DebotConfigurator.configureWithCustomizeMenu(this, builder.getStrategyList());\r\n    }\r\n}\r\n\r\n```\r\n\r\n## Contact\r\n\r\n[@tomoima525](https://twitter.com/tomoima525)\r\n\r\n## License\r\n\r\n```\r\nTomoaki Imai 2016\r\nLicensed under the Apache License, Version 2.0 (the \"License\").\r\nYou may obtain a copy of the License at\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software distributed\r\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\r\nOR CONDITIONS OF ANY KIND, either express or implied. See the License for\r\nthe specific language governing permissions and limitations under the License.\r\n\r\nYou agree that all contributions to this repository, in the form of fixes, \r\npull-requests, new examples etc. follow the above-mentioned license.\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}